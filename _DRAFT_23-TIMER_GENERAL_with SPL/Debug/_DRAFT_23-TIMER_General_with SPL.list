
_DRAFT_23-TIMER_GENERAL_with SPL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b28  08000b28  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000b28  08000b28  00010b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000b2c  08000b2c  00010b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08000b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          000000a8  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000b8  200000b8  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000065ea  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000f39  00000000  00000000  0002662a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000910  00000000  00000000  00027568  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000868  00000000  00000000  00027e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002ba9  00000000  00000000  000286e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002d5c  00000000  00000000  0002b289  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002dfe5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000026f0  00000000  00000000  0002e064  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00030754  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b10 	.word	0x08000b10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08000b10 	.word	0x08000b10

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <DAC_SetChannel1Data+0x34>)
 800029e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4413      	add	r3, r2
 80002a6:	3308      	adds	r3, #8
 80002a8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	461a      	mov	r2, r3
 80002ae:	887b      	ldrh	r3, [r7, #2]
 80002b0:	6013      	str	r3, [r2, #0]
}
 80002b2:	bf00      	nop
 80002b4:	3714      	adds	r7, #20
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40007400 	.word	0x40007400

080002c4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	4b25      	ldr	r3, [pc, #148]	; (8000370 <DMA_Init+0xac>)
 80002dc:	4013      	ands	r3, r2
 80002de:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002ee:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002fa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000306:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800030c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000312:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000318:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	4313      	orrs	r3, r2
 800031e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 0307 	bic.w	r3, r3, #7
 8000332:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4313      	orrs	r3, r2
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4313      	orrs	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	691a      	ldr	r2, [r3, #16]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	685a      	ldr	r2, [r3, #4]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	60da      	str	r2, [r3, #12]
}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	f01c803f 	.word	0xf01c803f

08000374 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d006      	beq.n	8000394 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f043 0201 	orr.w	r2, r3, #1
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000392:	e005      	b.n	80003a0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f023 0201 	bic.w	r2, r3, #1
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	601a      	str	r2, [r3, #0]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d002      	beq.n	80003ca <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80003c4:	2301      	movs	r3, #1
 80003c6:	73fb      	strb	r3, [r7, #15]
 80003c8:	e001      	b.n	80003ce <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80003dc:	b480      	push	{r7}
 80003de:	b087      	sub	sp, #28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80003e6:	2300      	movs	r3, #0
 80003e8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a15      	ldr	r2, [pc, #84]	; (8000448 <DMA_GetFlagStatus+0x6c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d802      	bhi.n	80003fc <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <DMA_GetFlagStatus+0x70>)
 80003f8:	613b      	str	r3, [r7, #16]
 80003fa:	e001      	b.n	8000400 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <DMA_GetFlagStatus+0x74>)
 80003fe:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000406:	2b00      	cmp	r3, #0
 8000408:	d003      	beq.n	8000412 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	e002      	b.n	8000418 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800041e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000422:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000424:	68fa      	ldr	r2, [r7, #12]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	4013      	ands	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	d002      	beq.n	8000434 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800042e:	2301      	movs	r3, #1
 8000430:	75fb      	strb	r3, [r7, #23]
 8000432:	e001      	b.n	8000438 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000438:	7dfb      	ldrb	r3, [r7, #23]
}
 800043a:	4618      	mov	r0, r3
 800043c:	371c      	adds	r7, #28
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	4002640f 	.word	0x4002640f
 800044c:	40026000 	.word	0x40026000
 8000450:	40026400 	.word	0x40026400

08000454 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <DMA_ClearFlag+0x50>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d802      	bhi.n	800046c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <DMA_ClearFlag+0x54>)
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	e001      	b.n	8000470 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <DMA_ClearFlag+0x58>)
 800046e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d007      	beq.n	800048a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000480:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000488:	e006      	b.n	8000498 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000490:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	6093      	str	r3, [r2, #8]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	4002640f 	.word	0x4002640f
 80004a8:	40026000 	.word	0x40026000
 80004ac:	40026400 	.word	0x40026400

080004b0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80004bc:	78fb      	ldrb	r3, [r7, #3]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d006      	beq.n	80004d0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80004c2:	490a      	ldr	r1, [pc, #40]	; (80004ec <RCC_APB1PeriphClockCmd+0x3c>)
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <RCC_APB1PeriphClockCmd+0x3c>)
 80004c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80004ce:	e006      	b.n	80004de <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80004d0:	4906      	ldr	r1, [pc, #24]	; (80004ec <RCC_APB1PeriphClockCmd+0x3c>)
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <RCC_APB1PeriphClockCmd+0x3c>)
 80004d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	43db      	mvns	r3, r3
 80004da:	4013      	ands	r3, r2
 80004dc:	640b      	str	r3, [r1, #64]	; 0x40
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40023800 	.word	0x40023800

080004f0 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	460b      	mov	r3, r1
 80004fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	887a      	ldrh	r2, [r7, #2]
 8000500:	819a      	strh	r2, [r3, #12]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800050e:	b480      	push	{r7}
 8000510:	b085      	sub	sp, #20
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	460b      	mov	r3, r1
 8000518:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800051a:	2300      	movs	r3, #0
 800051c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	891b      	ldrh	r3, [r3, #8]
 8000522:	b29a      	uxth	r2, r3
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	4013      	ands	r3, r2
 8000528:	b29b      	uxth	r3, r3
 800052a:	2b00      	cmp	r3, #0
 800052c:	d002      	beq.n	8000534 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800052e:	2301      	movs	r3, #1
 8000530:	73fb      	strb	r3, [r7, #15]
 8000532:	e001      	b.n	8000538 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000534:	2300      	movs	r3, #0
 8000536:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000538:	7bfb      	ldrb	r3, [r7, #15]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
	...

08000548 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a29      	ldr	r2, [pc, #164]	; (8000604 <TIM_TimeBaseInit+0xbc>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d013      	beq.n	800058c <TIM_TimeBaseInit+0x44>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a28      	ldr	r2, [pc, #160]	; (8000608 <TIM_TimeBaseInit+0xc0>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d00f      	beq.n	800058c <TIM_TimeBaseInit+0x44>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000572:	d00b      	beq.n	800058c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a25      	ldr	r2, [pc, #148]	; (800060c <TIM_TimeBaseInit+0xc4>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d007      	beq.n	800058c <TIM_TimeBaseInit+0x44>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a24      	ldr	r2, [pc, #144]	; (8000610 <TIM_TimeBaseInit+0xc8>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d003      	beq.n	800058c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a23      	ldr	r2, [pc, #140]	; (8000614 <TIM_TimeBaseInit+0xcc>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d108      	bne.n	800059e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800058c:	89fb      	ldrh	r3, [r7, #14]
 800058e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000592:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	885a      	ldrh	r2, [r3, #2]
 8000598:	89fb      	ldrh	r3, [r7, #14]
 800059a:	4313      	orrs	r3, r2
 800059c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a1d      	ldr	r2, [pc, #116]	; (8000618 <TIM_TimeBaseInit+0xd0>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d00c      	beq.n	80005c0 <TIM_TimeBaseInit+0x78>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a1c      	ldr	r2, [pc, #112]	; (800061c <TIM_TimeBaseInit+0xd4>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d008      	beq.n	80005c0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80005ae:	89fb      	ldrh	r3, [r7, #14]
 80005b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80005b4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	891a      	ldrh	r2, [r3, #8]
 80005ba:	89fb      	ldrh	r3, [r7, #14]
 80005bc:	4313      	orrs	r3, r2
 80005be:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	89fa      	ldrh	r2, [r7, #14]
 80005c4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	685a      	ldr	r2, [r3, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	881a      	ldrh	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <TIM_TimeBaseInit+0xbc>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d003      	beq.n	80005e6 <TIM_TimeBaseInit+0x9e>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a09      	ldr	r2, [pc, #36]	; (8000608 <TIM_TimeBaseInit+0xc0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d104      	bne.n	80005f0 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	7a9b      	ldrb	r3, [r3, #10]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2201      	movs	r2, #1
 80005f4:	829a      	strh	r2, [r3, #20]
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40010000 	.word	0x40010000
 8000608:	40010400 	.word	0x40010400
 800060c:	40000400 	.word	0x40000400
 8000610:	40000800 	.word	0x40000800
 8000614:	40000c00 	.word	0x40000c00
 8000618:	40001000 	.word	0x40001000
 800061c:	40001400 	.word	0x40001400

08000620 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d008      	beq.n	8000644 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	b29b      	uxth	r3, r3
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	b29a      	uxth	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000642:	e007      	b.n	8000654 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	b29b      	uxth	r3, r3
 800064a:	f023 0301 	bic.w	r3, r3, #1
 800064e:	b29a      	uxth	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	801a      	strh	r2, [r3, #0]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	807b      	strh	r3, [r7, #2]
 800066c:	4613      	mov	r3, r2
 800066e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000670:	787b      	ldrb	r3, [r7, #1]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d008      	beq.n	8000688 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	899b      	ldrh	r3, [r3, #12]
 800067a:	b29a      	uxth	r2, r3
 800067c:	887b      	ldrh	r3, [r7, #2]
 800067e:	4313      	orrs	r3, r2
 8000680:	b29a      	uxth	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000686:	e009      	b.n	800069c <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	899b      	ldrh	r3, [r3, #12]
 800068c:	b29a      	uxth	r2, r3
 800068e:	887b      	ldrh	r3, [r7, #2]
 8000690:	43db      	mvns	r3, r3
 8000692:	b29b      	uxth	r3, r3
 8000694:	4013      	ands	r3, r2
 8000696:	b29a      	uxth	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	819a      	strh	r2, [r3, #12]
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80006ac:	4b38      	ldr	r3, [pc, #224]	; (8000790 <Audio_MAL_IRQHandler+0xe8>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b38      	ldr	r3, [pc, #224]	; (8000794 <Audio_MAL_IRQHandler+0xec>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	4610      	mov	r0, r2
 80006b8:	f7ff fe90 	bl	80003dc <DMA_GetFlagStatus>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d064      	beq.n	800078c <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80006c2:	4b35      	ldr	r3, [pc, #212]	; (8000798 <Audio_MAL_IRQHandler+0xf0>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d04c      	beq.n	8000764 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80006ca:	bf00      	nop
 80006cc:	4b30      	ldr	r3, [pc, #192]	; (8000790 <Audio_MAL_IRQHandler+0xe8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fe6b 	bl	80003ac <DMA_GetCmdStatus>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1f7      	bne.n	80006cc <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80006dc:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <Audio_MAL_IRQHandler+0xe8>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <Audio_MAL_IRQHandler+0xec>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4619      	mov	r1, r3
 80006e6:	4610      	mov	r0, r2
 80006e8:	f7ff feb4 	bl	8000454 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80006ec:	4b2b      	ldr	r3, [pc, #172]	; (800079c <Audio_MAL_IRQHandler+0xf4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <Audio_MAL_IRQHandler+0xf8>)
 80006f4:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <Audio_MAL_IRQHandler+0xf0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006fe:	4293      	cmp	r3, r2
 8000700:	bf28      	it	cs
 8000702:	4613      	movcs	r3, r2
 8000704:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <Audio_MAL_IRQHandler+0xf8>)
 8000706:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <Audio_MAL_IRQHandler+0xe8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4924      	ldr	r1, [pc, #144]	; (80007a0 <Audio_MAL_IRQHandler+0xf8>)
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fdd8 	bl	80002c4 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <Audio_MAL_IRQHandler+0xe8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2101      	movs	r1, #1
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fe2a 	bl	8000374 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <Audio_MAL_IRQHandler+0xf4>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <Audio_MAL_IRQHandler+0xf0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800072c:	d203      	bcs.n	8000736 <Audio_MAL_IRQHandler+0x8e>
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <Audio_MAL_IRQHandler+0xf0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	e000      	b.n	8000738 <Audio_MAL_IRQHandler+0x90>
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <Audio_MAL_IRQHandler+0xfc>)
 8000738:	4413      	add	r3, r2
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <Audio_MAL_IRQHandler+0xf4>)
 800073c:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <Audio_MAL_IRQHandler+0xf0>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <Audio_MAL_IRQHandler+0xf0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800074a:	428b      	cmp	r3, r1
 800074c:	bf28      	it	cs
 800074e:	460b      	movcs	r3, r1
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	4a11      	ldr	r2, [pc, #68]	; (8000798 <Audio_MAL_IRQHandler+0xf0>)
 8000754:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <Audio_MAL_IRQHandler+0xe8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2101      	movs	r1, #1
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fe09 	bl	8000374 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000762:	e013      	b.n	800078c <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <Audio_MAL_IRQHandler+0xe8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fe02 	bl	8000374 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <Audio_MAL_IRQHandler+0xe8>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <Audio_MAL_IRQHandler+0xec>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	4610      	mov	r0, r2
 800077c:	f7ff fe6a 	bl	8000454 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <Audio_MAL_IRQHandler+0xf4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f87f 	bl	800088a <EVAL_AUDIO_TransferComplete_CallBack>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000008 	.word	0x20000008
 8000794:	2000000c 	.word	0x2000000c
 8000798:	20000000 	.word	0x20000000
 800079c:	2000002c 	.word	0x2000002c
 80007a0:	2000006c 	.word	0x2000006c
 80007a4:	0001fffe 	.word	0x0001fffe

080007a8 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80007ac:	f7ff ff7c 	bl	80006a8 <Audio_MAL_IRQHandler>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80007b8:	f7ff ff76 	bl	80006a8 <Audio_MAL_IRQHandler>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80007c4:	2102      	movs	r1, #2
 80007c6:	480d      	ldr	r0, [pc, #52]	; (80007fc <SPI3_IRQHandler+0x3c>)
 80007c8:	f7ff fea1 	bl	800050e <SPI_I2S_GetFlagStatus>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d011      	beq.n	80007f6 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <SPI3_IRQHandler+0x40>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d106      	bne.n	80007e8 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80007da:	f000 f861 	bl	80008a0 <EVAL_AUDIO_GetSampleCallBack>
 80007de:	4603      	mov	r3, r0
 80007e0:	4619      	mov	r1, r3
 80007e2:	2004      	movs	r0, #4
 80007e4:	f7ff fd52 	bl	800028c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80007e8:	f000 f85a 	bl	80008a0 <EVAL_AUDIO_GetSampleCallBack>
 80007ec:	4603      	mov	r3, r0
 80007ee:	4619      	mov	r1, r3
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <SPI3_IRQHandler+0x3c>)
 80007f2:	f7ff fe7d 	bl	80004f0 <SPI_I2S_SendData>
  }
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40003c00 	.word	0x40003c00
 8000800:	20000004 	.word	0x20000004

08000804 <TIMER_CONFIG_SPL>:

TIM_TimeBaseInitTypeDef TIMStructure;
NVIC_InitTypeDef NVICStructure;			// Interrupt Flag

void TIMER_CONFIG_SPL ()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); 	  // TIM2 to APB1 Bus Activited
 8000808:	2101      	movs	r1, #1
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff fe50 	bl	80004b0 <RCC_APB1PeriphClockCmd>

	TIMStructure.TIM_ClockDivision		= TIM_CKD_DIV4;  	  // Divide by 4 to save on electricity consumption
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <TIMER_CONFIG_SPL+0x74>)
 8000812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000816:	811a      	strh	r2, [r3, #8]
	TIMStructure.TIM_CounterMode		= TIM_CounterMode_Up; // UP-DOWN Counter
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <TIMER_CONFIG_SPL+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	805a      	strh	r2, [r3, #2]
	TIMStructure.TIM_Period				= 62499;
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <TIMER_CONFIG_SPL+0x74>)
 8000820:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000824:	605a      	str	r2, [r3, #4]
	TIMStructure.TIM_Prescaler			= 1343;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <TIMER_CONFIG_SPL+0x74>)
 8000828:	f240 523f 	movw	r2, #1343	; 0x53f
 800082c:	801a      	strh	r2, [r3, #0]
	TIMStructure.TIM_RepetitionCounter  = 0; 		     	  // Repetition status is determined (each rising)
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <TIMER_CONFIG_SPL+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	729a      	strb	r2, [r3, #10]

	TIM_TimeBaseInit (TIM2, &TIMStructure);					  // Initialized
 8000834:	4910      	ldr	r1, [pc, #64]	; (8000878 <TIMER_CONFIG_SPL+0x74>)
 8000836:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800083a:	f7ff fe85 	bl	8000548 <TIM_TimeBaseInit>

	TIM_Cmd (TIM2, ENABLE); // Peripherals Enabled
 800083e:	2101      	movs	r1, #1
 8000840:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000844:	f7ff feec 	bl	8000620 <TIM_Cmd>

	TIM_ITConfig (TIM2, TIM_IT_Update, ENABLE); 			  // Interrupt and Timer connection
 8000848:	2201      	movs	r2, #1
 800084a:	2101      	movs	r1, #1
 800084c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000850:	f7ff ff06 	bl	8000660 <TIM_ITConfig>

	NVICStructure.NVIC_IRQChannel					= TIM2_IRQn; // Write timer to enter the interrupt state
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <TIMER_CONFIG_SPL+0x78>)
 8000856:	221c      	movs	r2, #28
 8000858:	701a      	strb	r2, [r3, #0]
	NVICStructure.NVIC_IRQChannelCmd				= ENABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <TIMER_CONFIG_SPL+0x78>)
 800085c:	2201      	movs	r2, #1
 800085e:	70da      	strb	r2, [r3, #3]
	NVICStructure.NVIC_IRQChannelPreemptionPriority = 0xFF;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <TIMER_CONFIG_SPL+0x78>)
 8000862:	22ff      	movs	r2, #255	; 0xff
 8000864:	705a      	strb	r2, [r3, #1]
	NVICStructure.NVIC_IRQChannelSubPriority		= 0xFF;
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <TIMER_CONFIG_SPL+0x78>)
 8000868:	22ff      	movs	r2, #255	; 0xff
 800086a:	709a      	strb	r2, [r3, #2]
	NVIC_Init (&NVICStructure);
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <TIMER_CONFIG_SPL+0x78>)
 800086e:	f7ff fcab 	bl	80001c8 <NVIC_Init>
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000ac 	.word	0x200000ac
 800087c:	200000a8 	.word	0x200000a8

08000880 <main>:

	TIM_ClearITPendingBit (TIM2, TIM_IT_Update); // Flag was clear
}

int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	TIMER_CONFIG_SPL ();
 8000884:	f7ff ffbe 	bl	8000804 <TIMER_CONFIG_SPL>

	while (1); // WE DO NOT USE THE MICROPROCESSOR
 8000888:	e7fe      	b.n	8000888 <main+0x8>

0800088a <EVAL_AUDIO_TransferComplete_CallBack>:
}


void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	6039      	str	r1, [r7, #0]
  return;
 8000894:	bf00      	nop
}
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <EVAL_AUDIO_GetSampleCallBack>:

uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return -1;
 80008a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008ba:	e003      	b.n	80008c4 <LoopCopyDataInit>

080008bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008c2:	3104      	adds	r1, #4

080008c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008c4:	480b      	ldr	r0, [pc, #44]	; (80008f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008cc:	d3f6      	bcc.n	80008bc <CopyDataInit>
  ldr  r2, =_sbss
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008d0:	e002      	b.n	80008d8 <LoopFillZerobss>

080008d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008d4:	f842 3b04 	str.w	r3, [r2], #4

080008d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008dc:	d3f9      	bcc.n	80008d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008de:	f000 f841 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e2:	f000 f8f1 	bl	8000ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e6:	f7ff ffcb 	bl	8000880 <main>
  bx  lr    
 80008ea:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008f0:	08000b30 	.word	0x08000b30
  ldr  r0, =_sdata
 80008f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008f8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80008fc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000900:	200000b8 	.word	0x200000b8

08000904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC_IRQHandler>

08000906 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000918:	e7fe      	b.n	8000918 <HardFault_Handler+0x4>

0800091a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800091e:	e7fe      	b.n	800091e <MemManage_Handler+0x4>

08000920 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000924:	e7fe      	b.n	8000924 <BusFault_Handler+0x4>

08000926 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800092a:	e7fe      	b.n	800092a <UsageFault_Handler+0x4>

0800092c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000968:	4a16      	ldr	r2, [pc, #88]	; (80009c4 <SystemInit+0x60>)
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <SystemInit+0x60>)
 800096c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000978:	4a13      	ldr	r2, [pc, #76]	; (80009c8 <SystemInit+0x64>)
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <SystemInit+0x64>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <SystemInit+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <SystemInit+0x64>)
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <SystemInit+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000998:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <SystemInit+0x64>)
 800099c:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <SystemInit+0x68>)
 800099e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009a0:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <SystemInit+0x64>)
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <SystemInit+0x64>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <SystemInit+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80009b2:	f000 f80d 	bl	80009d0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009b6:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <SystemInit+0x60>)
 80009b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009bc:	609a      	str	r2, [r3, #8]
#endif
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00
 80009c8:	40023800 	.word	0x40023800
 80009cc:	24003010 	.word	0x24003010

080009d0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80009de:	4a36      	ldr	r2, [pc, #216]	; (8000ab8 <SetSysClock+0xe8>)
 80009e0:	4b35      	ldr	r3, [pc, #212]	; (8000ab8 <SetSysClock+0xe8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80009ea:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <SetSysClock+0xe8>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3301      	adds	r3, #1
 80009f8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d103      	bne.n	8000a08 <SetSysClock+0x38>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a06:	d1f0      	bne.n	80009ea <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <SetSysClock+0xe8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000a14:	2301      	movs	r3, #1
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	e001      	b.n	8000a1e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d142      	bne.n	8000aaa <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a24:	4a24      	ldr	r2, [pc, #144]	; (8000ab8 <SetSysClock+0xe8>)
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <SetSysClock+0xe8>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000a30:	4a22      	ldr	r2, [pc, #136]	; (8000abc <SetSysClock+0xec>)
 8000a32:	4b22      	ldr	r3, [pc, #136]	; (8000abc <SetSysClock+0xec>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a3a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000a3c:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <SetSysClock+0xe8>)
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <SetSysClock+0xe8>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000a44:	4a1c      	ldr	r2, [pc, #112]	; (8000ab8 <SetSysClock+0xe8>)
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <SetSysClock+0xe8>)
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a4e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000a50:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <SetSysClock+0xe8>)
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <SetSysClock+0xe8>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000a5a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <SetSysClock+0xe8>)
 8000a5e:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <SetSysClock+0xf0>)
 8000a60:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <SetSysClock+0xe8>)
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <SetSysClock+0xe8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a6c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000a6e:	bf00      	nop
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <SetSysClock+0xe8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d0f9      	beq.n	8000a70 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <SetSysClock+0xf4>)
 8000a7e:	f240 6205 	movw	r2, #1541	; 0x605
 8000a82:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000a84:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <SetSysClock+0xe8>)
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <SetSysClock+0xe8>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	f023 0303 	bic.w	r3, r3, #3
 8000a8e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000a90:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <SetSysClock+0xe8>)
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <SetSysClock+0xe8>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	f043 0302 	orr.w	r3, r3, #2
 8000a9a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000a9c:	bf00      	nop
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <SetSysClock+0xe8>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	f003 030c 	and.w	r3, r3, #12
 8000aa6:	2b08      	cmp	r3, #8
 8000aa8:	d1f9      	bne.n	8000a9e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40007000 	.word	0x40007000
 8000ac0:	07405408 	.word	0x07405408
 8000ac4:	40023c00 	.word	0x40023c00

08000ac8 <__libc_init_array>:
 8000ac8:	b570      	push	{r4, r5, r6, lr}
 8000aca:	4e0d      	ldr	r6, [pc, #52]	; (8000b00 <__libc_init_array+0x38>)
 8000acc:	4c0d      	ldr	r4, [pc, #52]	; (8000b04 <__libc_init_array+0x3c>)
 8000ace:	1ba4      	subs	r4, r4, r6
 8000ad0:	10a4      	asrs	r4, r4, #2
 8000ad2:	2500      	movs	r5, #0
 8000ad4:	42a5      	cmp	r5, r4
 8000ad6:	d109      	bne.n	8000aec <__libc_init_array+0x24>
 8000ad8:	4e0b      	ldr	r6, [pc, #44]	; (8000b08 <__libc_init_array+0x40>)
 8000ada:	4c0c      	ldr	r4, [pc, #48]	; (8000b0c <__libc_init_array+0x44>)
 8000adc:	f000 f818 	bl	8000b10 <_init>
 8000ae0:	1ba4      	subs	r4, r4, r6
 8000ae2:	10a4      	asrs	r4, r4, #2
 8000ae4:	2500      	movs	r5, #0
 8000ae6:	42a5      	cmp	r5, r4
 8000ae8:	d105      	bne.n	8000af6 <__libc_init_array+0x2e>
 8000aea:	bd70      	pop	{r4, r5, r6, pc}
 8000aec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000af0:	4798      	blx	r3
 8000af2:	3501      	adds	r5, #1
 8000af4:	e7ee      	b.n	8000ad4 <__libc_init_array+0xc>
 8000af6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000afa:	4798      	blx	r3
 8000afc:	3501      	adds	r5, #1
 8000afe:	e7f2      	b.n	8000ae6 <__libc_init_array+0x1e>
 8000b00:	08000b28 	.word	0x08000b28
 8000b04:	08000b28 	.word	0x08000b28
 8000b08:	08000b28 	.word	0x08000b28
 8000b0c:	08000b2c 	.word	0x08000b2c

08000b10 <_init>:
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	bf00      	nop
 8000b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b16:	bc08      	pop	{r3}
 8000b18:	469e      	mov	lr, r3
 8000b1a:	4770      	bx	lr

08000b1c <_fini>:
 8000b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b1e:	bf00      	nop
 8000b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b22:	bc08      	pop	{r3}
 8000b24:	469e      	mov	lr, r3
 8000b26:	4770      	bx	lr
